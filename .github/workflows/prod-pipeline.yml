name: Production CI

on:
  push:
    branches:
      - main

jobs:
  build-unit-test:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.generate_tag.outputs.docker_tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "ENVIRONMENT=dev-local" >> .env
          echo "DATABASE_URI_LOCAL=postgresql://postgres:rootroot@34.70.81.203/publications" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> .env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> .env
          echo "SMTP_SERVER=${{ secrets.SMTP_SERVER }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "EMAIL_ADDRESS=${{ secrets.EMAIL_ADDRESS }}" >> .env
          echo "PASSWORD_EMAIL=${{ secrets.PASSWORD_EMAIL }}" >> .env
          echo "SECRET_KEY_EMAIL=${{ secrets.SECRET_KEY_EMAIL }}" >> .env
          echo "ALGORITHM_EMAIL=${{ secrets.ALGORITHM_EMAIL }}" >> .env
          echo "AUTH_URL=${{ secrets.AUTH_URL }}" >> .env
          echo "API_KEY_FIREBASE=${{ secrets.API_KEY_FIREBASE }}" >> .env
          echo "AUTH_DOMAIN_FIREBASE=${{ secrets.AUTH_DOMAIN_FIREBASE }}" >> .env
          echo "PROJECT_ID_FIREBASE=${{ secrets.PROJECT_ID_FIREBASE }}" >> .env
          echo "STORAGE_BUCKET_FIREBASE=${{ secrets.STORAGE_BUCKET_FIREBASE }}" >> .env
          echo "MESSAGING_SENDER_ID_FIREBASE=${{ secrets.MESSAGING_SENDER_ID_FIREBASE }}" >> .env
          echo "APP_ID_FIREBASE=${{ secrets.APP_ID_FIREBASE }}" >> .env
          echo "DATABASE_URL_FIREBASE=${{ secrets.DATABASE_URL_FIREBASE }}" >> .env
    
      - name: Create Firebase Credentials File
        run: |
          echo '{
            "type": "service_account",
            "project_id": "activity-storage-1a571",
            "private_key_id": "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}",
            "private_key": "${{ secrets.FIREBASE_PRIVATE_KEY }}",
            "client_email": "${{ secrets.FIREBASE_CLIENT_EMAIL }}",
            "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": "${{ secrets.FIREBASE_CLIENT_CERT_URL }}",
            "universe_domain": "googleapis.com"
          }' > firebaseCredentials.json
        
      - name: Generate Image Tag
        id: generate_tag
        run: | 
          echo "tag=$(git log --pretty=format:'%h' -n 1)" >> $GITHUB_ENV
          echo "docker_tag=${{ env.tag }}" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        run: |
          docker build -t joaquinreyero12/publications:${{ env.tag }} .
      
      - name: Run Unit Test
        run: |
          docker run --rm --env-file .env -v $(pwd):/app -w /app joaquinreyero12/publications:${{ env.tag }} pytest src -vv --tb=long -p no:warnings

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Image
        if: success()
        run: |
          docker push joaquinreyero12/publications:${{ env.tag }}

  push-deploy:
    runs-on: ubuntu-latest
    needs: build-unit-test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Debug Output
        run: |
           echo "Docker tag: ${{ needs.build-unit-test.outputs.docker_tag }}"

      - name: Pull Docker image from Docker Hub
        run: docker pull joaquinreyero12/publications:${{ needs.build-unit-test.outputs.docker_tag }}

      - name: Authenticate with Google Cloud Platform
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Tag Docker image for Google Container Registry
        run: |
          docker tag joaquinreyero12/publications:${{ needs.build-unit-test.outputs.docker_tag }} gcr.io/crested-primacy-413823/publications:${{ needs.build-unit-test.outputs.docker_tag }}

      - name: Authenticate Docker to Google Container Registry
        run: gcloud auth configure-docker

      - name: Push Docker image to Google Container Registry
        run: docker push gcr.io/crested-primacy-413823/publications:${{ needs.build-unit-test.outputs.docker_tag }}

      - name: Deploy On Google Cloud
        run: |
          gcloud run deploy publications \
            --image gcr.io/crested-primacy-413823/publications:${{ needs.build-unit-test.outputs.docker_tag }} \
            --platform managed \
            --region us-east1 \
            --allow-unauthenticated \
            --add-cloudsql-instances crested-primacy-413823:us-central1:publications \
            --project crested-primacy-413823 \
            --update-env-vars ENVIRONMENT="${{ secrets.ENVIRONMENT }}",DATABASE_URI="${{ secrets.DATABASE_URI }}",API_KEY_FIREBASE="${{ secrets.API_KEY_FIREBASE }}",AUTH_DOMAIN_FIREBASE="${{ secrets.AUTH_DOMAIN_FIREBASE }}",PROJECT_ID_FIREBASE="${{ secrets.PROJECT_ID_FIREBASE }}",STORAGE_BUCKET_FIREBASE="${{ secrets.STORAGE_BUCKET_FIREBASE }}",MESSAGING_SENDER_ID_FIREBASE="${{ secrets.MESSAGING_SENDER_ID_FIREBASE }}",APP_ID_FIREBASE="${{ secrets.APP_ID_FIREBASE }}",DATABASE_URL_FIREBASE="${{ secrets.DATABASE_URL_FIREBASE }}",SECRET_KEY="${{ secrets.SECRET_KEY }}",ALGORITHM="${{ secrets.ALGORITHM }}",ACCESS_TOKEN_EXPIRE_MINUTES="${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}",AUTH_URL="${{ secrets.AUTH_URL }}"

  run-integration-tests:
    runs-on: ubuntu-latest
    needs: push-deploy
    outputs: 
      integration_failed: ${{ steps.init.outputs.integration_failed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update and Install System Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            wget \
            libnss3 \
            libnspr4 \
            libglib2.0-0 \
            libatk1.0-0 \
            libatk-bridge2.0-0 \
            libcups2 \
            libdrm2 \
            libxkbcommon0 \
            libgbm1 \
            libx11-xcb1 \
            libxrandr2 \
            libxcomposite1 \
            libxdamage1 \
            libxfixes3 \
            libasound2 \
            libpangocairo-1.0-0 \
            libgtk-3-0 \
            libgdk-pixbuf2.0-0 \
            libpango-1.0-0 \
            libatspi2.0-0 \
            libdbus-1-3 \
            libxcb1 \
            libexpat1 \
            libsm6 \
            libxext6 \
            libcairo2 \
            libglib2.0-bin \
            && sudo apt-get clean

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-playwright
          python -m playwright install

      - name: Run Integration Tests
        run: |
          cd integration_tests && pytest --maxfail=5 --disable-warnings
        continue-on-error: true

      - name: Set output for integration failed
        run: |
          echo "integration_failed=$([[ $? -ne 0 ]] && echo true || echo false)" >> $GITHUB_OUTPUT

  rollback-build-push-deploy:
    runs-on: ubuntu-latest
    needs: run-integration-tests
    if: needs.run-integration-tests.outputs.integration_failed == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
                  
      - name: Switch to main branch
        run: |
          git fetch origin main
          git checkout main

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate Image Tag
        id: tag
        run: echo "tag=$(git log --pretty=format:'%h' -n 1)" >> $GITHUB_ENV

      - name: Create Firebase Credentials File
        run: |
          echo '{
            "type": "service_account",
            "project_id": "activity-storage-1a571",
            "private_key_id": "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}",
            "private_key": "${{ secrets.FIREBASE_PRIVATE_KEY }}",
            "client_email": "${{ secrets.FIREBASE_CLIENT_EMAIL }}",
            "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": "${{ secrets.FIREBASE_CLIENT_CERT_URL }}",
            "universe_domain": "googleapis.com"
          }' > firebaseCredentials.json

      - name: Build and Push Docker Image
        run: |
          docker build -t joaquinreyero12/publications:${{ env.tag }} .
          docker push joaquinreyero12/publications:${{ env.tag }}

      - name: Pull Docker image from Docker Hub
        run: docker pull joaquinreyero12/publications:${{ env.tag }}

      - name: Authenticate with Google Cloud Platform
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Tag Docker image for Google Container Registry
        run: |
          docker tag joaquinreyero12/publications:${{ env.tag }} gcr.io/crested-primacy-413823/publications:${{ env.tag }}

      - name: Authenticate Docker to Google Container Registry
        run: gcloud auth configure-docker

      - name: Push Docker image to Google Container Registry
        run: docker push gcr.io/crested-primacy-413823/publications:${{ env.tag }}

      - name: Deploy On Google Cloud
        run: |
          gcloud run deploy publications \
            --image gcr.io/crested-primacy-413823/publications:${{ env.tag }} \
            --platform managed \
            --region us-east1 \
            --allow-unauthenticated \
            --add-cloudsql-instances crested-primacy-413823:us-central1:publications \
            --project crested-primacy-413823 \
            --update-env-vars ENVIRONMENT="${{ secrets.ENVIRONMENT }}",DATABASE_URI="${{ secrets.DATABASE_URI }}",API_KEY_FIREBASE="${{ secrets.API_KEY_FIREBASE }}",AUTH_DOMAIN_FIREBASE="${{ secrets.AUTH_DOMAIN_FIREBASE }}",PROJECT_ID_FIREBASE="${{ secrets.PROJECT_ID_FIREBASE }}",STORAGE_BUCKET_FIREBASE="${{ secrets.STORAGE_BUCKET_FIREBASE }}",MESSAGING_SENDER_ID_FIREBASE="${{ secrets.MESSAGING_SENDER_ID_FIREBASE }}",APP_ID_FIREBASE="${{ secrets.APP_ID_FIREBASE }}",DATABASE_URL_FIREBASE="${{ secrets.DATABASE_URL_FIREBASE }}",SECRET_KEY="${{ secrets.SECRET_KEY }}",ALGORITHM="${{ secrets.ALGORITHM }}",ACCESS_TOKEN_EXPIRE_MINUTES="${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}",AUTH_URL="${{ secrets.AUTH_URL }}"