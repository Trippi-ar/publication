name: Production CI

on:
  push:
    branches:
      - main

jobs:
  run-unit-tests:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: dev-local
      DATABASE_URI_LOCAL: postgresql://postgres:rootroot@34.70.81.203/publications
      API_KEY_FIREBASE: ${{ secrets.API_KEY_FIREBASE }}
      AUTH_DOMAIN_FIREBASE: ${{ secrets.AUTH_DOMAIN_FIREBASE }}
      PROJECT_ID_FIREBASE: ${{ secrets.PROJECT_ID_FIREBASE }}
      STORAGE_BUCKET_FIREBASE: ${{ secrets.STORAGE_BUCKET_FIREBASE }}
      MESSAGING_SENDER_ID_FIREBASE: ${{ secrets.MESSAGING_SENDER_ID_FIREBASE }}
      APP_ID_FIREBASE: ${{ secrets.APP_ID_FIREBASE }}
      DATABASE_URL_FIREBASE: ${{ secrets.DATABASE_URL_FIREBASE }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
      SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
      PASSWORD_EMAIL: ${{ secrets.PASSWORD_EMAIL }}
      SECRET_KEY_EMAIL: ${{ secrets.SECRET_KEY_EMAIL }}
      ALGORITHM_EMAIL: ${{ secrets.ALGORITHM_EMAIL }}
      USERS_LOCALHOST: ${{ secrets.USERS_LOCALHOST }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest
        
  build-push-deploy:
    runs-on: ubuntu-latest
    needs: run-unit-tests
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate Image Tag
        id: tag
        run: echo "::set-output name=tag::$(git log --pretty=format:'%h' -n 1)"

      - name: Build and Push Docker Image
        run: |
          docker build -t joaquinreyero12/publications:${{ steps.tag.outputs.tag }} .
          docker push joaquinreyero12/publications:${{ steps.tag.outputs.tag }}

      - name: Pull Docker image from Docker Hub
        run: docker pull joaquinreyero12/publications:${{ steps.tag.outputs.tag }}

      - name: Authenticate with Google Cloud Platform
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Tag Docker image for Google Container Registry
        run: |
          docker tag joaquinreyero12/publications:${{ steps.tag.outputs.tag }} gcr.io/crested-primacy-413823/publications:${{ steps.tag.outputs.tag }}

      - name: Authenticate Docker to Google Container Registry
        run: gcloud auth configure-docker

      - name: Push Docker image to Google Container Registry
        run: docker push gcr.io/crested-primacy-413823/publications:${{ steps.tag.outputs.tag }}

      - name: Deploy On Google Cloud
        run: |
          gcloud run deploy publications \
            --image gcr.io/crested-primacy-413823/publications:${{ steps.tag.outputs.tag }} \
            --platform managed \
            --region us-east1 \
            --allow-unauthenticated \
            --add-cloudsql-instances crested-primacy-413823:us-central1:publications \
            --project crested-primacy-413823 \
            --update-env-vars ENVIRONMENT="${{ secrets.ENVIRONMENT }}",DATABASE_URI="${{ secrets.DATABASE_URI }}",API_KEY_FIREBASE="${{ secrets.API_KEY_FIREBASE }}",AUTH_DOMAIN_FIREBASE="${{ secrets.AUTH_DOMAIN_FIREBASE }}",PROJECT_ID_FIREBASE="${{ secrets.PROJECT_ID_FIREBASE }}",STORAGE_BUCKET_FIREBASE="${{ secrets.STORAGE_BUCKET_FIREBASE }}",MESSAGING_SENDER_ID_FIREBASE="${{ secrets.MESSAGING_SENDER_ID_FIREBASE }}",APP_ID_FIREBASE="${{ secrets.APP_ID_FIREBASE }}",DATABASE_URL_FIREBASE="${{ secrets.DATABASE_URL_FIREBASE }}",SECRET_KEY="${{ secrets.SECRET_KEY }}",ALGORITHM="${{ secrets.ALGORITHM }}",ACCESS_TOKEN_EXPIRE_MINUTES="${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}",AUTH_URL="${{ secrets.AUTH_URL }}"

  run-integration-tests:
    runs-on: ubuntu-latest
    needs: build-push-deploy
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Navigate to integration tests directory and 
        run: |
            cd integration_tests && sudo npm install && sudo npx playwright install
            
      - name: Run Tests
        run: |
            cd integration_tests && sudo npx codeceptjs run --steps
